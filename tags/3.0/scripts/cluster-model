#! /bin/sh

n=$1
if (test -z "$n") then
    exit -1
fi

echo "stochastic"
echo
echo "const left_mx = $n;"
echo "const right_mx = $n;"
echo
echo "rate line_rate = 0.0002;"
echo "rate Toleft_rate = 0.00025;"
echo "rate Toright_rate = 0.00025;"
echo
echo "module Left"
echo
echo "  left_n : [0..left_mx] init left_mx;"
echo "  left : [0..1];"
echo
echo "  [startLeft] (left=0) & (left_n<left_mx) -> 1 : (left'=1);"
echo "  [repairLeft] (left=1) & (left_n<left_mx) -> 1 : (left'=0) & (left_n'=left_n+1);"
echo "  [] (left_n>0) -> 0.002*left_n : (left_n'=left_n-1);"
echo
echo "endmodule"
echo
echo "module Right = Left [left=right, left_n=right_n, left_mx=right_mx,"
echo "                     startLeft=startRight, repairLeft=repairRight]"
echo "endmodule"
echo
echo "module Repairman"
echo
echo "  r : [0..1];"
echo
echo "  [startLeft] (r=0) -> 10 : (r'=1);"
echo "  [startRight] (r=0) -> 10 : (r'=1);"
echo "  [startToLeft] (r=0) -> 10 : (r'=1);"
echo "  [startToRight] (r=0) -> 10 : (r'=1);"
echo "  [startLine] (r=0) -> 10 : (r'=1);"
echo
echo "  [repairLeft] (r=1) -> 2 : (r'=0);"
echo "  [repairRight] (r=1) -> 2 : (r'=0);"
echo "  [repairToLeft] (r=1) -> 0.25 : (r'=0);"
echo "  [repairToRight] (r=1) -> 0.25 : (r'=0);"
echo "  [repairLine] (r=1) -> 0.125 : (r'=0);"
echo
echo "endmodule"
echo
echo "module Line"
echo
echo "  line : [0..1];"
echo "  line_n : [0..1] init 1;"
echo
echo "  [startLine] (line=0) & (line_n=0) -> 1 : (line'=1);"
echo "  [repairLine] (line=1) & (line_n=0) -> 1 : (line'=0) & (line_n'=1);"
echo "  [] (line_n=1) -> line_rate : (line_n'=0);"
echo
echo "endmodule"
echo
echo "module ToLeft = Line [line=Toleft, line_n=Toleft_n,"
echo "                      line_rate=Toleft_rate, startLine=startToLeft,"
echo "                      repairLine=repairToLeft]"
echo "endmodule"
echo
echo "module ToRight = Line [line=Toright, line_n=Toright_n,"
echo "                       line_rate=Toright_rate, startLine=startToRight,"
echo "                       repairLine=repairToRight]"
echo "endmodule"
