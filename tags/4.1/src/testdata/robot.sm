stochastic

const n;  // grid size

rate mr1 = 1;
rate mr2 = 2/2;
rate mr3 = 2/3;
rate mr4 = 2/4;
rate cr1 = 1/10;
rate cr2 = 1/2;

module robot

  x1 : [1..n] init 1;
  y1 : [1..n] init 1;
  c  : [0..1] init 0;

  [] (x1<n & c=0 & !(x1+1=x2 & y1=y2))        -> mr1 : (x1'=x1+1);
  [] (x1=n & y1<n & c=0 & !(x1+1=x2 & y1=y2)) -> mr1 : (y1'=y1+1);

  [] (c=0) -> cr1 : (c'=1);
  [] (c=1) -> cr2 : (c'=0);

endmodule

module janitor

  x2 : [1..n] init n;
  y2 : [1..n] init n;

  [] (x2=1 & y2=1 & !(x2+1=x1 & y2=y1)) -> mr2 : (x2'=x2+1);
  [] (x2=1 & y2=1 & !(x2=x1 & y2+1=y1)) -> mr2 : (y2'=y2+1);
  [] (x2=1 & y2=n & !(x2+1=x1 & y2=y1)) -> mr2 : (x2'=x2+1);
  [] (x2=1 & y2=n & !(x2=x1 & y2-1=y1)) -> mr2 : (y2'=y2-1);
  [] (x2=n & y2=1 & !(x2-1=x1 & y2=y1)) -> mr2 : (x2'=x2-1);
  [] (x2=n & y2=1 & !(x2=x1 & y2+1=y1)) -> mr2 : (y2'=y2+1);
  [] (x2=n & y2=n & !(x2-1=x1 & y2=y1)) -> mr2 : (x2'=x2-1);
  [] (x2=n & y2=n & !(x2=x1 & y2-1=y1)) -> mr2 : (y2'=y2-1);

  [] (x2=1 & y2>1 & y2<n & !(x2+1=x1 & y2=y1)) -> mr3 : (x2'=x2+1);
  [] (x2=1 & y2>1 & y2<n & !(x2=x1 & y2+1=y1)) -> mr3 : (y2'=y2+1);
  [] (x2=1 & y2>1 & y2<n & !(x2=x1 & y2-1=y1)) -> mr3 : (y2'=y2-1);
  [] (x2=n & y2>1 & y2<n & !(x2-1=x1 & y2=y1)) -> mr3 : (x2'=x2-1);
  [] (x2=n & y2>1 & y2<n & !(x2=x1 & y2+1=y1)) -> mr3 : (y2'=y2+1);
  [] (x2=n & y2>1 & y2<n & !(x2=x1 & y2-1=y1)) -> mr3 : (y2'=y2-1);
  [] (x2>1 & x2<n & y2=1 & !(x2=x1 & y2+1=y1)) -> mr3 : (y2'=y2+1);
  [] (x2>1 & x2<n & y2=1 & !(x2+1=x1 & y2=y1)) -> mr3 : (x2'=x2+1);
  [] (x2>1 & x2<n & y2=1 & !(x2-1=x1 & y2=y1)) -> mr3 : (x2'=x2-1);
  [] (x2>1 & x2<n & y2=n & !(x2=x1 & y2-1=y1)) -> mr3 : (y2'=y2-1);
  [] (x2>1 & x2<n & y2=n & !(x2+1=x1 & y2=y1)) -> mr3 : (x2'=x2+1);
  [] (x2>1 & x2<n & y2=n & !(x2-1=x1 & y2=y1)) -> mr3 : (x2'=x2-1);

  [] (x2>1 & x2<n & y2>1 & y2<n & !(x2+1=x1 & y2=y1)) -> mr4 : (x2'=x2+1);
  [] (x2>1 & x2<n & y2>1 & y2<n & !(x2-1=x1 & y2=y1)) -> mr4 : (x2'=x2-1);
  [] (x2>1 & x2<n & y2>1 & y2<n & !(x2=x1 & y2+1=y1)) -> mr4 : (y2'=y2+1);
  [] (x2>1 & x2<n & y2>1 & y2<n & !(x2=x1 & y2-1=y1)) -> mr4 : (y2'=y2-1);

endmodule
